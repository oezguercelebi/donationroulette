---
description: Testing
globs: 
alwaysApply: false
---
# Testing

This document outlines the testing approach, tools, and best practices for our TypeScript project.

## Testing Philosophy

Our testing strategy follows the "Testing Trophy" approach, which prioritizes:

1. **Static Testing**: TypeScript, ESLint, and other static analysis tools
2. **Unit Testing**: Testing individual functions and components
3. **Integration Testing**: Testing how components and features work together
4. **End-to-End Testing**: Testing complete user flows

## Test Stack

- **Jest**: Test runner and assertion library
- **React Testing Library**: Component testing
- **MSW (Mock Service Worker)**: API mocking
- **Cypress**: End-to-end testing
- **Playwright**: Cross-browser testing

## Setup and Configuration

### Jest Configuration

```typescript
// jest.config.js
const nextJest = require('next/jest');

const createJestConfig = nextJest({
  dir: './',
});

/** @type {import('jest').Config} */
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  collectCoverageFrom: [
    'src/**/*.{js,jsx,ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{js,jsx,ts,tsx}',
    '!src/pages/_*.{js,jsx,ts,tsx}',
    '!**/node_modules/**',
  ],
  testPathIgnorePatterns: [
    '<rootDir>/node_modules/',
    '<rootDir>/.next/',
    '<rootDir>/cypress/',
  ],
};

module.exports = createJestConfig(customJestConfig);
```

### Jest Setup File

```typescript
// jest.setup.js
import '@testing-library/jest-dom';
import { server } from './src/mocks/server';

// Establish API mocking before all tests
beforeAll(() => server.listen());

// Reset any request handlers that we may add during the tests,
// so they don't affect other tests
afterEach(() => server.resetHandlers());

// Clean up after the tests are finished
afterAll(() => server.close());

// Mock Next.js router
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
    replace: jest.fn(),
    back: jest.fn(),
    prefetch: jest.fn(),
  }),
  usePathname: () => '/current-path',
  useSearchParams: () => new URLSearchParams(),
}));

// Mock next/image
jest.mock('next/image', () => ({
  __esModule: true,
  default: (props) => {
    // eslint-disable-next-line jsx-a11y/alt-text
    return <img {...props} />;
  },
}));

// Suppress console errors during tests
global.console = {
  ...console,
  error: jest.fn(),
  warn: jest.fn(),
};
```

## Mock Service Worker Setup

```typescript
// src/mocks/handlers.ts
import { rest } from 'msw';

export const handlers = [
  // User authentication
  rest.post('/api/auth/login', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({
        user: {
          id: '1',
          name: 'Test User',
          email: 'test@example.com',
        },
        token: 'mock-jwt-token',
      })
    );
  }),

  // User profile
  rest.get('/api/user/profile', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({
        id: '1',
        name: 'Test User',
        email: 'test@example.com',
        avatar: 'https://images.example.com/avatar.jpg',
        role: 'user',
        createdAt: '2023-01-01T00:00:00.000Z',
        updatedAt: '2023-01-01T00:00:00.000Z',
      })
    );
  }),

  // 404 fallback
  rest.get('*', (req, res, ctx) => {
    console.error(`Please add request handler for ${req.url.toString()}`);
    return res(ctx.status(404), ctx.json({ message: 'Not Found' }));
  }),
];
```

```typescript
// src/mocks/server.ts
import { setupServer } from 'msw/node';
import { handlers } from './handlers';

// This configures a request mocking server with the given request handlers
export const server = setupServer(...handlers);
```

```typescript
// src/mocks/browser.ts (for development mocking)
import { setupWorker } from 'msw';
import { handlers } from './handlers';

// This configures a Service Worker with the given request handlers
export const worker = setupWorker(...handlers);
```

## Unit Testing Examples

### Testing Utility Functions

```typescript
// src/lib/utils/formatters.test.ts
import { formatCurrency, formatDate, truncateText } from './formatters';

describe('formatCurrency', () => {
  it('formats USD correctly', () => {
    expect(formatCurrency(1000)).toBe('$1,000.00');
    expect(formatCurrency(1000.5)).toBe('$1,000.50');
    expect(formatCurrency(0)).toBe('$0.00');
  });

  it('formats with custom locale and currency', () => {
    expect(formatCurrency(1000, 'EUR', 'de-DE')).toBe('1.000,00 â‚¬');
  });
});

describe('formatDate', () => {
  it('formats date in default format', () => {
    const date = new Date('2023-01-15T12:30:00');
    expect(formatDate(date)).toBe('Jan 15, 2023');
  });

  it('formats date with custom format', () => {
    const date = new Date('2023-01-15T12:30:00');
    expect(formatDate(date, { month: 'long', day: 'numeric', year: 'numeric' })).toBe('January 15, 2023');
  });
});

describe('truncateText', () => {
  it('truncates text that exceeds max length', () => {
    expect(truncateText('This is a long text that needs truncation', 20)).toBe('This is a long text...');
  });

  it('does not truncate text shorter than max length', () => {
    expect(truncateText('Short text', 20)).toBe('Short text');
  });
});
```

### Testing React Components

```typescript
// src/components/ui/Button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button', () => {
  it('renders correctly with default props', () => {
    render(<Button>Click me</Button>);
    
    const button = screen.getByRole('button', { name: /click me/i });
    expect(button).toBeInTheDocument();
    expect(button).not.toHaveAttribute('disabled');
  });

  it('applies the correct variant classes', () => {
    const { rerender } = render(<Button variant="primary">Primary</Button>);
    
    let button = screen.getByRole('button', { name: /primary/i });
    expect(button).toHaveClass('bg-primary');
    
    rerender(<Button variant="secondary">Secondary</Button>);
    button = screen.getByRole('button', { name: /secondary/i });
    expect(button).toHaveClass('bg-secondary');
  });

  it('calls onClick handler when clicked', () => {
    const onClickMock = jest.fn();
    render(<Button onClick={onClickMock}>Click me</Button>);
    
    const button = screen.getByRole('button', { name: /click me/i });
    fireEvent.click(button);
    
    expect(onClickMock).toHaveBeenCalledTimes(1);
  });

  it('shows loading state correctly', () => {
    render(<Button isLoading>Loading</Button>);
    
    const button = screen.getByRole('button', { name: /loading/i });
    expect(button).toHaveAttribute('disabled');
    expect(button).toHaveClass('opacity-50');
    
    // Check for spinner presence
    const spinner = document.querySelector('svg');
    expect(spinner).toBeInTheDocument();
  });
});
```

## Integration Testing Examples

```typescript
// src/components/features/LoginForm.test.tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { LoginForm } from './LoginForm';

// Mock the server action
jest.mock('@/app/actions/auth', () => ({
  login: jest.fn().mockResolvedValue({
    success: true,
    data: { redirectUrl: '/dashboard' },
  }),
}));

// Mock router for redirect
const mockPush = jest.fn();
jest.mock('next/navigation', () => ({
  ...jest.requireActual('next/navigation'),
  useRouter: () => ({
    push: mockPush,
  }),
}));

describe('LoginForm', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders form elements correctly', () => {
    render(<LoginForm />);
    
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();
  });

  it('validates inputs and shows error messages', async () => {
    render(<LoginForm />);
    
    // Submit with empty fields
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(screen.getByText(/email is required/i)).toBeInTheDocument();
      expect(screen.getByText(/password is required/i)).toBeInTheDocument();
    });
  });

  it('submits form with valid data and redirects on success', async () => {
    render(<LoginForm />);
    
    // Fill out form
    await userEvent.type(screen.getByLabelText(/email/i), 'test@example.com');
    await userEvent.type(screen.getByLabelText(/password/i), 'password123');
    
    // Submit form
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(mockPush).toHaveBeenCalledWith('/dashboard');
    });
  });
});
```

## End-to-End Testing with Cypress

### Cypress Configuration

```typescript
// cypress.config.ts
import { defineConfig } from 'cypress';

export default defineConfig({
  e2e: {
    baseUrl: 'http://localhost:3000',
    viewportWidth: 1280,
    viewportHeight: 720,
    video: false,
    screenshotOnRunFailure: true,
    specPattern: 'cypress/e2e/**/*.cy.{js,ts}',
    supportFile: 'cypress/support/e2e.ts',
  },
  component: {
    devServer: {
      framework: 'next',
      bundler: 'webpack',
    },
    specPattern: 'src/**/*.cy.{js,ts,jsx,tsx}',
  },
});
```

### E2E Test Example

```typescript
// cypress/e2e/auth.cy.ts
describe('Authentication Flow', () => {
  beforeEach(() => {
    // Clear cookies and localStorage
    cy.clearCookies();
    cy.clearLocalStorage();
  });

  it('should allow a user to log in', () => {
    // Visit the login page
    cy.visit('/login');

    // Fill in the login form
    cy.get('input[name="email"]').type('test@example.com');
    cy.get('input[name="password"]').type('password123');

    // Submit the form
    cy.get('button[type="submit"]').click();

    // Should be redirected to the dashboard
    cy.url().should('include', '/dashboard');

    // User should be logged in (check for user menu)
    cy.get('[data-testid="user-menu"]').should('exist');
  });

  it('should show validation errors with invalid credentials', () => {
    cy.visit('/login');

    // Submit with empty fields
    cy.get('button[type="submit"]').click();

    // Check validation messages
    cy.contains('Email is required').should('be.visible');
    cy.contains('Password is required').should('be.visible');

    // Fill with invalid email
    cy.get('input[name="email"]').type('invalid-email');
    cy.get('button[type="submit"]').click();

    // Check email validation
    cy.contains('Please enter a valid email').should('be.visible');
  });

  it('should allow users to log out', () => {
    // Login and redirect to dashboard
    cy.login('test@example.com', 'password123');

    // Find and click the logout button
    cy.get('[data-testid="user-menu"]').click();
    cy.contains('Log out').click();

    // Should be redirected to login page
    cy.url().should('include', '/login');
  });
});
```

## Playwright Cross-Browser Testing

### Playwright Configuration

```typescript
// playwright.config.ts
import { PlaywrightTestConfig, devices } from '@playwright/test';

const config: PlaywrightTestConfig = {
  testDir: './tests/e2e',
  timeout: 30 * 1000,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'mobile-chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'mobile-safari',
      use: { ...devices['iPhone 12'] },
    },
  ],
};

export default config;
```

### Playwright Test Example

```typescript
// tests/e2e/auth.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Authentication Flow', () => {
  test.beforeEach(async ({ page }) => {
    // Clear cookies and localStorage
    await page.context().clearCookies();
    await page.evaluate(() => localStorage.clear());
  });

  test('should allow a user to log in', async ({ page }) => {
    // Visit the login page
    await page.goto('/login');

    // Fill in the login form
    await page.fill('input[name="email"]', 'test@example.com');
    await page.fill('input[name="password"]', 'password123');

    // Submit the form
    await page.click('button[type="submit"]');

    // Should be redirected to the dashboard
    await expect(page).toHaveURL('/dashboard');

    // User should be logged in (check for user menu)
    await expect(page.locator('[data-testid="user-menu"]')).toBeVisible();
  });

  test('should show validation errors with invalid credentials', async ({ page }) => {
    await page.goto('/login');

    // Submit with empty fields
    await page.click('button[type="submit"]');

    // Check validation messages
    await expect(page.locator('text=Email is required')).toBeVisible();
    await expect(page.locator('text=Password is required')).toBeVisible();

    // Fill with invalid email
    await page.fill('input[name="email"]', 'invalid-email');
    await page.click('button[type="submit"]');

    // Check email validation
    await expect(page.locator('text=Please enter a valid email')).toBeVisible();
  });
});
```

## Test Scripts

Add these to `package.json`:

```json
"scripts": {
  "test": "jest",
  "test:watch": "jest --watch",
  "test:coverage": "jest --coverage",
  "lint": "eslint src --ext .ts,.tsx",
  "type-check": "tsc --noEmit",
  "cypress": "cypress open",
  "cypress:headless": "cypress run",
  "playwright": "playwright test",
  "playwright:ui": "playwright test --ui"
}
```

## CI/CD Integration

### GitHub Actions Workflow

```yaml
# .github/workflows/test.yml
name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run unit tests
        run: npm run test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  e2e:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run playwright

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
```
